apply plugin: 'com.android.library'

// START BINTRAY RELEASE INFOS

ext {
    PUBLISH_GROUP_ID = 'de.wackernagel.android'
    PUBLISH_ARTIFACT_ID = 'sidekick-medias'
    PUBLISH_VERSION = '1.0.0'
}

// END BINTRAY RELEASE INFOS

android {
    compileSdkVersion rootProject.ext.androidSdkVersion
    buildToolsVersion "25.0.3"

    defaultConfig {
        minSdkVersion rootProject.ext.androidMinVersion
        targetSdkVersion rootProject.ext.androidSdkVersion
        versionCode 1
        versionName PUBLISH_VERSION

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    compile "com.android.support:support-core-utils:$rootProject.ext.androidSupportVersion"

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

// START BINTRAY RELEASE TASK

apply from: "android-release-aar.gradle"

task bintray( dependsOn: [ "clean", "build", "generateRelease" ] ) {
    build.mustRunAfter( clean )
    generateRelease.mustRunAfter( build )

    doLast {
        copy {
            from "${buildDir}"
            into "${projectDir}/bintray"
            include '*.zip'
        }
        println "Bintray release created"
    }
}

// END BINTRAY RELEASE TASK

// START JACOCO CODE COVERAGE TASK

apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.7.9"
}

def fileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*Test*.*',
        'android/**/*.*'
]
def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
def mainSrc = "${project.projectDir}/src/main/java"

task jacoco(type: JacocoReport, dependsOn: 'test') {

    reports {
        html.enabled = true
        html.destination = "${buildDir}/reports/jacoco"
    }

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = files("${buildDir}/jacoco/testDebugUnitTest.exec")

    doLast {
        println "Report created at ${buildDir}/reports/jacoco/index.html"
    }
}

// END JACOCO CODE COVERAGE TASK